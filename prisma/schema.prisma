// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BOSS
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  letters       Letter[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum Status {
  SENT
  RECEIVED
  FORWARD
}

model Letter {
  id         String         @id @default(cuid())
  code       String         @unique @db.Text
  title      String
  content    String         @db.Text
  coverImg   String
  attachment String?        @db.Text
  senderId   String
  sender     User           @relation(fields: [senderId], references: [id], onDelete: Cascade)
  statuses   LetterStatus[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LetterStatus {
  id          String @id @default(cuid())
  status      Status @default(SENT)
  description String
  letterId    String
  letter      Letter @relation(fields: [letterId], references: [id], onDelete: Cascade)
  assignedBy  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
